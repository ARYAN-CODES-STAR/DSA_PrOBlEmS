#Two Sum

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
      
            // vector<int> ans;
            // unordered_map<int, int>mpp;
            // for(int i = 0; i<nums.size(); i++) {
            //     if(mpp.find(target - nums[i])!= mpp.end()){
            //         ans.push_back(mpp[target-nums[i]]);
            //         ans.push_back(i);
            //         return ans;
            //     }
            //     mpp[nums[i]] = i;
            // }
            // return ans;
            vector<int> ans;
        unordered_map<int,int> maps;

        for( int i=0 ; i < nums.size() ; i++ ){
            if( maps.find( target - nums[i] ) != maps.end()){
                // int index = hash_function(maps);
                ans.push_back(maps[target - nums[i]]);
                ans.push_back(i);
                return ans;
            }
                maps[nums[i]] = i;
        }
        
            return ans;
    }
    
};


ADDING TWO NUMBERS

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    //    unordered_map<int,int> maps;
       
        ListNode* l3 = new ListNode(0);
        int carry = 0;

        ListNode* head = l3;
        //  
        while( l1 && l2 ){
          
            int value = l1 -> val + l2 -> val + carry ;
            carry = value / 10 ;

            l3 -> next = new ListNode( value%10);
            l3 = l3 -> next;
            l1=l1->next;
            l2 =l2->next;
            

            
        }
        while(l1){
            
            int value = l1 -> val + carry ;
            carry = value/10;
            // carry = value / 10 ;

            l3 -> next = new ListNode( value%10);
            l3 = l3 -> next;
            // l2 =l2->next;
            l1=l1->next;
            
        }
         while(l2){
            
            int value = l2 -> val + carry ;
            // int carry = value/10;
            carry = value / 10 ;

            l3 -> next = new ListNode( value%10);
            l3 = l3 -> next;
            l2 =l2 -> next;
            // l1=l1->next;
            
        }
        if(carry){
            l3 ->next = new ListNode(carry);
        }
            return head->next;

        
        
        
    }
};
