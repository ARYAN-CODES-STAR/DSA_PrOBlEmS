// Intersection of two arrays


#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
{
	// Write your code here.

	int i=0 ,j = 0 ;
	vector<int> ans ;

	while( i<n && j<m ){

		if( arr1[i] == arr2[j] ){
				ans.push_back(arr1[i]);
				i++;
				j++;
		}
		else if( arr1[i] < arr2[j]  ){
			i++;

		}

		else{
			j++;
		}



	}


	return ans ;
}

// Pair Sum

#include <bits/stdc++.h> 
#include <bits/stdc++.h> 
vector<vector<int>> pairSum(vector<int> &arr, int s){
   // Write your code here.
   vector <vector<int>> ans ;

   for( int i = 0 ; i < arr.size() ; i++  ){
      for( int j = i+1 ; j < arr.size() ; j++ ){

         if( arr[i] == arr[j] ){
            vector<int> temp;
            temp.push_back(min(arr[i], arr[j]));
            temp.push_back(max(arr[i], arr[j]));
            ans.push_back(temp);
         }
      }
   }
   sort(ans.begin(), ans.end());
   return ans;
}


//Binary search
#include<iostream>
using namespace std;
int binarySearch( int arr[] , int n , int key ){
    
    int s = 0 ;
    int e = n-1 ;
    
    int mid= s + (e-s)/2 ;
    
    while( s <= e ){
        if( key == arr[mid] ){
            return 1 ;
            
        }
        else if( key > arr[mid] ){
            s= mid+1 ;
            e = n-1 ;
      
            
        }
        else{
            s = 0 ;
            e = mid-1 ;
        }
            
            mid = s+(e-s)/2 ;
        
    }
    return -1 ;
    
}

int main(){
    int a[6] = { 1,2,3,4,5,6 };
    
  cout<< binarySearch(a,6,4) << endl ;
    
    return 0;
}



//Leetcode daily prob


class Solution {
public:
    int jump(vector<int>& nums) {
        
        int ans = 0, n = int(nums.size());

        int End = 0, Far = 0;
        
        for (int i = 0; i < n - 1; ++i) {
        
                    Far = max(Far, i + nums[i]);

            if (i == End) {
                ans++;
                End = Far;
            }
        }
        
        return ans;
    }
};
